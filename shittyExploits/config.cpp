#include "config.h"

Config* config = new Config;

vector<string> getNextLineAndSplitIntoTokens(istream& str)
{
	vector<std::string>   result;
	string                line;
	getline(str, line);

	stringstream          lineStream(line);
	string                cell;

	while (getline(lineStream, cell, ','))
	{
		result.push_back(cell);
	}
	// This checks for a trailing comma with no data after it.
	if (!lineStream && cell.empty())
	{
		// If there was a trailing comma then add an empty element.
		result.push_back("");
	}
	return result;
}

string getShitBeforeDelim(string line, char delim)
{
	size_t findPos = line.find(delim);
	if (findPos == string::npos)
		return line;

	return line.substr(0, findPos);
}

string getShitAfterDelim(string line, char delim)
{
	auto findPos = line.find(delim);
	if (findPos == string::npos)
		return line;
	
	return line.substr(findPos + 1);
}

bool Config::readConfig()
{
	/*
	client_is_recording=0
	client_description=Hello World
	client_is_talker=1
	client_is_channel_commander=1
	*/

	string configFile = this->directory + configName;

	ifstream file(configFile);

	if (!file.good() || file.eof())
		return false;

	string line;
	map<string, string> options;

	while (getline(file, line))
	{
		options[getShitBeforeDelim(line, '=')] = getShitAfterDelim(line, '=');
	}

	this->isRecording = stoi(options["client_is_recording"]);
	this->description = options["client_description"];
	this->isTalker = stoi(options["client_is_talker"]);
	this->isChannelCommander = stoi(options["client_is_channel_commander"]);

	file.close();

	return true;
}

bool Config::writeConfig()
{
	if (directory.empty())
		return false;

	ofstream file(directory + configName, ofstream::out | ofstream::trunc);

	file << "client_is_recording=" << isRecording << endl;
	file << "client_description=" << description << endl;
	file << "client_is_talker=" << isTalker << endl;
	file << "client_is_channel_commander=" << isChannelCommander << endl;

	file.close();

	return true;
}
